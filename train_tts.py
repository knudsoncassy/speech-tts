import os from pathlib import Path from TTS.trainer import Trainer, TrainerArgs DATA_DIR = Path(__file__).resolve().parent.parent / "data" MODELS_DIR = Path(__file__).resolve().parent.parent / "models" CHECKPOINTS = MODELS_DIR / "checkpoints" CHECKPOINTS.mkdir(parents=True, exist_ok=True) # Path to resume checkpoint if available restore_ckpt = CHECKPOINTS / "best_model.pth.tar" restore_path = str(restore_ckpt) if restore_ckpt.exists() else None trainer_args = TrainerArgs( # Save all checkpoints in models/checkpoints output_path=str(CHECKPOINTS), datasets=[{ "formatter": "ljspeech", "dataset": str(DATA_DIR), "meta_file_train": "metadata.csv", "path": str(DATA_DIR), }], restore_path=restore_path, # resume if checkpoint exists model="tts_models/en/ljspeech/tacotron2-DDC", # base pretrained model batch_size=64, # V100 has large VRAM â†’ increase batch size eval_batch_size=32, eval_split_max_size=100, num_loader_workers=8, num_eval_loader_workers=4, run_eval=True, test_delay_epochs=-1, epochs=500, use_cuda=True, mixed_precision=True, # Use FP16 training for speed on V100 cudnn_benchmark=True, # Enable cuDNN autotuner print_step=50, save_step=500, save_checkpoints=True, continue_path=restore_path ) def train_tts(): print("[+] Starting TTS training...") trainer = Trainer(trainer_args) trainer.fit() if __name__ == "__main__": train_tts()
